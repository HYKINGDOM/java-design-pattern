# 修改端口号
server:
  port: 20001
spring:
  cloud:
    gateway:
      discovery:
        locator:
          # 激活网关路由的自动发现，会根据注册中心里面的服务自动生成路由
          enabled: true
          # 把服务名全部改为小写，默认全大写
          lower-case-service-id: true
      default-filters:
        # 表示在请求下游服务的时候，要把OAuth 2.0的访问令牌携带上去
        - TokenRelay
        # 网关要保存Session，不保存Session问题不大，但是保存以后比较简单一些
        - SaveSession
  security:
    oauth2:
      # 网关是一个纯粹的OAuth 2.0的客户端，它本身没有任何鉴权的能力
      # 客户端的配置参数，其实就是用于调用远程的鉴权服务
      client:
        registration:
          gateway:
            # provider要跟provider里面的key相同
            provider: user-center
            client-id: gateway
            client-secret: gateway_password
            authorization-grant-type: authorization_code
            redirect-uri: "${fk.host-prefix}/login/oauth2/code/gateway"
            scope: all
        provider:
          # 这个是key
          user-center:
            # 远程授权、鉴权的接口
            authorization-uri: ${fk.api-prefix}/oauth-server/oauth/authorize
            # 获取远程令牌的接口
            token-uri: ${fk.api-prefix}/oauth-server/oauth/token
            # 获取远程用户信息的接口
            user-info-uri: ${fk.api-prefix}/user-center/user/user-info
            # 返回的用户信息里面，name属性是用户名（用户标识符）
            # 由于在授权服务里面返回的收取信息对象中，name属性的值是User对象的id（主键）
            # 所以，得到的user-name其实是id
            user-name-attribute: name
            # 鉴权服务返回的信息是JWT加密的，所以需要通过获取鉴权服务器里面的公钥用于解密
            jwk-set-uri: ${spring.security.oauth2.resourceserver.jwt.jwk-set-uri}
      resourceserver:
        jwt:
          # 资源服务器的公钥证书的路径
          jwk-set-uri: ${fk.api-prefix}/oauth-server/oauth/token_key
security:
  oauth2:
    client:
      # 用于查找在前面spring.security.oauth2里面配置的Registration里面的镀锡，client-id要对应
      client-id: gateway